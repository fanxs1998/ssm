<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd
	http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd">

    <!-- spring希望管理所有的业务组件，除了控制器组件-->
    <context:component-scan base-package="com.code">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- 引入数据库的配置文件-->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!--Spring用来控制业务逻辑、数据源、事务控制、sop等-->
    <!-- 配置数据源(spring接管了mybatis的配置) -->  <!-- c3p0连接池 -->
    <bean id="dataSource"
          class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="jdbcUrl" value="${jdbc.url}"></property>
        <property name="driverClass" value="${jdbc.driver}"></property>
        <property name="user" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>

    <!-- 事务配置（spring接管mybatis事务操作，如事务的提交、回滚、关闭等） -->
    <bean id="dataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!-- 使用基于注解的事务 -->
    <tx:annotation-driven transaction-manager="dataSourceTransactionManager" />

    <!--
        整合Mybatis
        目的：1、spring管理所有组件。mapper的实现类。
                service ==> Dao  @Autowired:自动注入mapper
             2、spring用来管理事务，spring声明式事务

    -->
    <!-- sqlSessionFactory配置 (回忆一下mybatis编程，现在由spring注入) -->
    <!-- 创建SqlSessionFactory对象-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource" />
        <!-- configLocation指定全局 mybatis-config.xml 配置文件的位置 -->
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"></property>
        <!-- mapperLocations指定mapper文件的位置-->
        <property name="mapperLocations" value="classpath:mybatis/mapper/*.xml"></property>
    </bean>

    <!--配置一个可以进行批量执行的sqlSession-->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
        <constructor-arg name="executorType" value="BATCH"></constructor-arg>
    </bean>

    <!-- 配置mybatis mapper批量扫描 ,让这些mapper可以自动注入-->
    <!-- 从basePackage指定mapper接口的包名 -->
    <mybatis-spring:scan base-package="com.code.dao"></mybatis-spring:scan>

</beans>
