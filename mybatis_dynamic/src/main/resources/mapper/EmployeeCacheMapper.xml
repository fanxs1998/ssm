<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.code.dao.EmployeeCacheMapper">
    <!--第三方缓存整合ehcache-->
    <cache type="org.mybatis.caches.ehcache.EhcacheCache"></cache>

<!--    <cache eviction="FIFO" flushInterval="60000" readOnly="false" size="1024"></cache>-->

    <!--
        eviction：缓存的回收策略
            1.LRU - 最近最少使用的：移除最长时间不被使用的对象
            2.FIFO - 先进先出：按对象进入缓存的顺序来移除他们
            3.SOFT - 软引用：移除基于垃圾回收器和软引用规则的对象
            4.WEAK - 弱引用：更积极的移除基于垃圾收集器状态和弱引用规则的对象
            默认是LRU
        flushInterval：缓存刷新间隔
            缓存多久清空一次，默认不清空，设置一个毫秒值
        readOnly：
            true：只读 - mybatis认为所有从缓存中获取的数据都是只读操作，不会修改数据
                    mybatis为了加快获取速度，直接就会将数据在缓存中的引用交给用户，速度快但是不安全
            false（默认）：非只读 - mybatis觉得获取的数据可能会被修改。
                    mybatis会利用序列化&反序列化的技术克隆一份新的数据给你。安全但是速度慢
        size：缓存存放多少元素
        type="":指定自定义缓存的全类名；
                实现cache接口即可

    -->

    <select id="getEmpById" resultType="com.code.cache.Employee" useCache="true">
        select * from tbl_employee where id = #{id}
    </select>
</mapper>