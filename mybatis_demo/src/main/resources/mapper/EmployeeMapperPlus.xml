<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.code.dao.EmployeeMapperPlus">
    <cache eviction="FIFO" flushInterval="60000" readOnly="false" size="1024"></cache>
    <!--
        eviction：缓存的回收策略
            1.LRU - 最近最少使用的：移除最长时间不被使用的对象
            2.FIFO - 先进先出：按对象进入缓存的顺序来移除他们
            3.SOFT - 软引用：移除基于垃圾回收器和软引用规则的对象
            4.WEAK - 弱引用：更积极的移除基于垃圾收集器状态和弱引用规则的对象
            默认是LRU
        flushInterval：缓存刷新间隔
            缓存多久清空一次，默认不清空，设置一个毫秒值
        readOnly：
            true：只读 - mybatis认为所有从缓存中获取的数据都是只读操作，不会修改数据
                    mybatis为了加快获取速度，直接就会将数据在缓存中的引用交给用户，速度快但是不安全
            false（默认）：非只读 - mybatis觉得获取的数据可能会被修改。
                    mybatis会利用序列化&反序列化的技术克隆一份新的数据给你。安全但是速度慢
        size：缓存存放多少元素
        type="":指定自定义缓存的全类名；
                实现cache接口即可

    -->

    <resultMap id="MyEmp" type="com.code.bean.Employee">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>
    </resultMap>
    <select id="getEmpById" resultMap="MyEmp">
        select * from tbl_employee where id = #{id}
    </select>

    <!--联合查询：级联属性封装结果集-->
    <resultMap id="MyEmpPlus" type="com.code.bean.EmployeePlus">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>
        <result column="dept_id" property="dept.id"/>
        <result column="dept_name" property="dept.deptName"/>
    </resultMap>

    <!--使用association定义单个对象的封装规则-->
    <resultMap id="MyEmpPlus2" type="com.code.bean.EmployeePlus">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>
        <!--association可以指定联合的JavaBean对象
            property指定哪个属性是联合的对象
            javaType指定这个属性对象的类型(不能省略)-->
        <association property="dept" javaType="com.code.bean.Department">
            <id column="dept_id" property="id"/>
            <result column="dept_name" property="deptName"/>
        </association>
    </resultMap>
    <select id="getEmpAndDept" resultMap="MyEmpPlus2" >
        select e.id, e.last_name, e.gender, e.email, e.dept_id did,
            d.id dept_id, d.dept_name
        from tbl_employee e, tbl_dept d
        where e.dept_id = d.id
        and e.id = #{id}
    </select>


    <!--使用association进行分步查询-->
    <resultMap id="MyEmpByStep" type="com.code.bean.EmployeePlus">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>
        <!--association定义关联对象的封装规则
            select：表示当前属性是调用select指定的方法查出的结果
            column：指定将哪一列的属性传给方法
        -->
        <association property="dept" select="com.code.dao.DepartmentMapper.getDeptById" column="dept_id">
        </association>
    </resultMap>
    <select id="getEmpByIdStep" resultMap="MyEmpByStep">
        select * from tbl_employee where id = #{id}
    </select>


    <select id="getEmpsByDeptId" resultType="com.code.bean.Employee">
        select * from tbl_employee where dept_id = #{deptId}
    </select>

<!--
    `mybatis`可以使用`discriminator`判断某列的值，然后根据某列的值改变封装行为
    场景：
    封装Employee：如果查出女生，就把部门信息查出来，否则不查询；如果是男生，就把last_name这一列的值赋值给email
-->
    <resultMap id="MyEmpDis" type="com.code.bean.EmployeePlus">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>

        <!--
            column：指定判断的列名
            javaType:列值对应的java类型
            resultType：指定封装的结果类型
        -->
        <discriminator javaType="string" column="gender">
            <!--男生 就把last_name这一列的值赋值给email-->
            <case value="0" resultType="com.code.bean.EmployeePlus">
                <id column="id" property="id"/>
                <result column="last_name" property="lastName"/>
                <result column="last_name" property="gender"/>
                <result column="email" property="email"/>
            </case>
            <!--女生-->
            <case value="1" resultType="com.code.bean.EmployeePlus">
                <association property="dept" select="com.code.dao.DepartmentMapper.getDeptById" column="dept_id">
                </association>
            </case>
        </discriminator>
    </resultMap>

</mapper>