<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.code.dao.EmployeeMapper">
    <select id="getEmpById" resultType="com.code.bean.Employee">
        select * from tbl_employee where id = #{id}
    </select>
    <select id="getEmpByIdAndLastName" resultType="com.code.bean.Employee">
        select * from tbl_employee where id = #{id} and last_name = #{lastName}
    </select>
    <select id="getEmpsByLastNameLike" resultType="com.code.bean.Employee">
        select * from tbl_employee where last_name like #{lastName}
    </select>
    <select id="getEmpByReturnMap" resultType="java.util.Map">
        select *from tbl_employee where id = #{id}
    </select>
    <select id="getEmpByLastNameLikeReturnMap" resultType="java.util.Map">
        select *from tbl_employee where last_name like #{lastName}
    </select>
    <!--
        `mybatis`支持自增主键，自增主键值的获取是，利用`statement.getGeneratedKeys()`
        `useGeneratedKeys="true"`：告诉`mybatis`使用自增主键获取主键值策略
        `keyProperty=""`：指定对应的主键属性，`mybatis`获取到主键值以后，将这个值封装给`javaBean`的哪个属性
    -->
    <insert id="addEmp" parameterType="com.code.bean.Employee" useGeneratedKeys="true" keyProperty="id">
        insert into tbl_employee(last_name, gender, email)
        values (#{lastName}, #{gender}, #{email})
    </insert>

    <!--`Oracle`不支持自增，`Oracle`使用序列来模拟-->
<!--    <insert id="addEmp" datebaseId="oracle">
        &lt;!&ndash;
            keyProperty:查出的主键值封装给javaBean的哪个属性
            order="BEAFORE":当前sql在插入sql之前运行
                  "AFTER":当前sql在插入sql之后运行
            BEAFORE运行顺序：先运行selectKey查询id的sql，查出id封装给JavaBean的id属性
                            再运行插入的sql，就可以取出id属性的值
            AFTER运行顺序：先运行插入的sql（从序列取出新值作为id）
                            再运行selectKey查询id的sql
        &ndash;&gt;
        <selectKey keyProperty="id" order="BEFORE" resultType="Integer">
            select EMPLOYEES_SEQ.nextval from dual
            &lt;!&ndash;after&ndash;&gt;
            &lt;!&ndash;select EMPLOYEES_SEQ.currval from dual&ndash;&gt;
        </selectKey>
        insert into tbl_employee(id, last_name, gender, email)
        values (employees_seq.nextval, #{lastName}, #{gender}, #{email})
    </insert>-->
    <update id="updateEmp">
        update tbl_employee
        set last_name = #{lastName}, gender= #{gender}, email = #{email}
        where id = #{id}
    </update>
    <delete id="deleteEmp">
        delete from tbl_employee
        where id = #{id}
    </delete>
</mapper>